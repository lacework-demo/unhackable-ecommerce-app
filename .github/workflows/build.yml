name: build

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'

jobs:
  ecommerce:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      - name: Build ecommerce-website and export to Docker
        uses: docker/build-push-action@v2
        with:
          file: docker/Dockerfile_ecommerce
          load: true
          tags: |
            ecommerce-website:latest
            public.ecr.aws/${{ secrets.ECR_NAME_NAMESPACE }}/ecommerce-website:latest
            ${{ steps.login-ecr.outputs.registry }}/ecommerce-website:latest

      # - uses: lacework/lw-scanner-action@v0.6.0
      #   name: Scan contacts container image for vulnerabitilies using Lacework
      #   with:
      #     USE_POLICY: true
      #     LW_ACCOUNT_NAME: ${{ secrets.LW_ACCOUNT_NAME }}
      #     LW_ACCESS_TOKEN: ${{ secrets.LW_ACCESS_TOKEN }}
      #     IMAGE_NAME: ecommerce-website
      #     IMAGE_TAG: latest

      - name: Build, tag, and push ecommerce-website to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ecommerce-website
          IMAGE_TAG:  latest
        run: |
          docker push $ECR_REGISTRY/${{ secrets.ECR_NAME_NAMESPACE }}/$ECR_REPOSITORY:$IMAGE_TAG


      - name: Build ecommerce-order and export to Docker
        uses: docker/build-push-action@v2
        with:
          file: docker/Dockerfile_order-service
          load: true
          tags: |
            ecommerce-order:latest
            public.ecr.aws/${{ secrets.ECR_NAME_NAMESPACE }}/ecommerce-order:latest
            ${{ steps.login-ecr.outputs.registry }}/ecommerce-order:latest

      # - uses: lacework/lw-scanner-action@v0.6.0
      #   name: Scan contacts container image for vulnerabitilies using Lacework
      #   with:
      #     USE_POLICY: true
      #     LW_ACCOUNT_NAME: ${{ secrets.LW_ACCOUNT_NAME }}
      #     LW_ACCESS_TOKEN: ${{ secrets.LW_ACCESS_TOKEN }}
      #     IMAGE_NAME: ecommerce-order
      #     IMAGE_TAG: latest

      - name: Build, tag, and push ecommerce-order to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ecommerce-order
          IMAGE_TAG:  latest
        run: |
          docker push $ECR_REGISTRY/${{ secrets.ECR_NAME_NAMESPACE }}/$ECR_REPOSITORY:$IMAGE_TAG


      - name: Build ecommerce-inventory and export to Docker
        uses: docker/build-push-action@v2
        with:
          file: docker/Dockerfile_datalayer
          load: true
          tags: |
            ecommerce-inventory:latest
            public.ecr.aws/${{ secrets.ECR_NAME_NAMESPACE }}/ecommerce-inventory:latest
            ${{ steps.login-ecr.outputs.registry }}/ecommerce-inventory:latest

        # - uses: lacework/lw-scanner-action@v0.6.0
        #   name: Scan contacts container image for vulnerabitilies using Lacework
        #   with:
        #     USE_POLICY: true
        #     LW_ACCOUNT_NAME: ${{ secrets.LW_ACCOUNT_NAME }}
        #     LW_ACCESS_TOKEN: ${{ secrets.LW_ACCESS_TOKEN }}
        #     IMAGE_NAME: ecommerce-inventory
        #     IMAGE_TAG: latest

      - name: Build, tag, and push ecommerce-inventory to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ecommerce-inventory
          IMAGE_TAG:  latest
        run: |
          docker push $ECR_REGISTRY/${{ secrets.ECR_NAME_NAMESPACE }}/$ECR_REPOSITORY:$IMAGE_TAG